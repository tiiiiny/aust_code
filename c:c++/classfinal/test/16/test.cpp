/*
* 16. 子矩阵的大小（动态规划） -- 最大非空子矩阵
* 【问题描述】
* 设矩阵的大小为矩阵中所有元素的和，现输入一个 N*N 的矩阵，请设计算法计算最大的非空(大小至少是 1*1)子矩阵的大小。
* 例如 4×4 的矩阵为：
1 0 1 1
1 1 1 1
1 1 1 1
0 1 -6 -8
* 其最大子矩阵为：
1 0 1 1
1 1 1 1
1 1 1 1
子矩阵大小是 11。
* 【输入】
* 输入是一个 N×N 的矩阵。输入的第一行给出 N(0<N≤100)。再后面的若干行
* 依次输入矩阵各行的元素，用空格作为分隔符，设矩阵中整数的范围都在[−127,127]。
* 【输出】
* 输出最大子矩阵的大小。
* 【输入样例】
4
1 0 1 1
1 1 1 1
1 1 1 1
0 1 -6 -8

4
0 -2 -7 0
9 2-6 2
-4 1 -4 1
-1 8 0 -2

7 7
1 3 4 7 3 5 3
3 -2 4 -4 0 3 -2
9 4 0 -3 4 3 0
3 2 8 -1 3 4 9
4 -1 9 -2 3 9 -4
0 3 9 6 7 -2 -3
4 8 6 8-2 -8 -4
* 【输出样例】
11

15
134
*/

#include <iostream>
#include <vector>
using namespace std;

int main() {
	int n;
	n =4;
	vector<vector<int> > matrix(n,vector<int>(n));
	matrix[0][0] = 1;
	matrix[0][1] = 0;
	matrix[0][2] = 1;
	matrix[0][3] = 1;
	matrix[1][0] = 1;
	matrix[1][1] = 1;
	matrix[1][2] = 1;
	matrix[1][3] = 1;
	matrix[2][0] = 1;
	matrix[2][1] = 1;
	matrix[2][2] = 1;
	matrix[2][3] = 1;
	matrix[3][0] = 0;
	matrix[3][1] = 1;
	matrix[3][2] = -6;
	matrix[3][3] = -8;
	



	return 0;
}