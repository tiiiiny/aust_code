statement ok
set join_order_algorithm = greedy;

statement ok
create table r1(a int);

query
insert into r1 values (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5), (1), (2), (3), (4), (5);
----
100

statement ok
create table r2(a int, b int);

query
insert into r2 values (1, 1), (2, 2), (3, 3), (4, 4), (1, 5), (2, 6), (3, 7), (4, 8), (1, 9), (2, 10), (3, 1), (4, 2), (1, 3), (2, 4), (3, 5), (4, 6), (1, 7), (2, 8), (3, 9), (4, 10), (1, 1), (2, 2), (3, 3), (4, 4), (1, 5), (2, 6), (3, 7), (4, 8), (1, 9), (2, 10), (3, 1), (4, 2), (1, 3), (2, 4), (3, 5), (4, 6), (1, 7), (2, 8), (3, 9), (4, 10), (1, 1), (2, 2), (3, 3), (4, 4), (1, 5), (2, 6), (3, 7), (4, 8), (1, 9), (2, 10), (3, 1), (4, 2), (1, 3), (2, 4), (3, 5), (4, 6), (1, 7), (2, 8), (3, 9), (4, 10), (1, 1), (2, 2), (3, 3), (4, 4), (1, 5), (2, 6), (3, 7), (4, 8), (1, 9), (2, 10), (3, 1), (4, 2), (1, 3), (2, 4), (3, 5), (4, 6), (1, 7), (2, 8), (3, 9), (4, 10), (1, 1), (2, 2), (3, 3), (4, 4), (1, 5), (2, 6), (3, 7), (4, 8), (1, 9), (2, 10), (3, 1), (4, 2), (1, 3), (2, 4), (3, 5), (4, 6), (1, 7), (2, 8), (3, 9), (4, 10);
----
100

statement ok
create table r3(b int, c int);

# Insert one more row to r3 to avoid select r3 as first table in the greedy algorithm
query
insert into r3 values (1, 1), (2, 2), (1, 3), (2, 4), (1, 5), (2, 6), (1, 7), (2, 8), (1, 9), (2, 10), (1, 11), (2, 12), (1, 13), (2, 14), (1, 15), (2, 16), (1, 17), (2, 18), (1, 19), (2, 20), (1, 1), (2, 2), (1, 3), (2, 4), (1, 5), (2, 6), (1, 7), (2, 8), (1, 9), (2, 10), (1, 11), (2, 12), (1, 13), (2, 14), (1, 15), (2, 16), (1, 17), (2, 18), (1, 19), (2, 20), (1, 1), (2, 2), (1, 3), (2, 4), (1, 5), (2, 6), (1, 7), (2, 8), (1, 9), (2, 10), (1, 11), (2, 12), (1, 13), (2, 14), (1, 15), (2, 16), (1, 17), (2, 18), (1, 19), (2, 20), (1, 1), (2, 2), (1, 3), (2, 4), (1, 5), (2, 6), (1, 7), (2, 8), (1, 9), (2, 10), (1, 11), (2, 12), (1, 13), (2, 14), (1, 15), (2, 16), (1, 17), (2, 18), (1, 19), (2, 20), (1, 1), (2, 2), (1, 3), (2, 4), (1, 5), (2, 6), (1, 7), (2, 8), (1, 9), (2, 10), (1, 11), (2, 12), (1, 13), (2, 14), (1, 15), (2, 16), (1, 17), (2, 18), (1, 19), (2, 20), (1, 1);
----
101

statement ok
create table r4(c int);

query
insert into r4 values(1), (2), (3), (4), (5), (6), (7), (8), (9), (10), (11), (12), (13), (14), (15), (16), (17), (18), (19), (20), (21), (22), (23), (24), (25), (1), (2), (3), (4), (5), (6), (7), (8), (9), (10), (11), (12), (13), (14), (15), (16), (17), (18), (19), (20), (21), (22), (23), (24), (25), (1), (2), (3), (4), (5), (6), (7), (8), (9), (10), (11), (12), (13), (14), (15), (16), (17), (18), (19), (20), (21), (22), (23), (24), (25), (1), (2), (3), (4), (5), (6), (7), (8), (9), (10), (11), (12), (13), (14), (15), (16), (17), (18), (19), (20), (21), (22), (23), (24), (25);
----
100

statement ok
analyze r1;

statement ok
analyze r2;

statement ok
analyze r3;

statement ok
analyze r4;

query rowsort
explain (optimizer) select r1.a, r2.a, r2.b, r3.b, r3.c, r4.c from r1, r2, r3, r4 where r1.a = r2.a and r2.b = r3.b and r3.c = r4.c;
----
===Optimizer===
Projection: ["r1.a", "r2.a", "r2.b", "r3.b", "r3.c", "r4.c"]
  NestedLoopJoin: r1.a = r2.a
    NestedLoopJoin: r3.c = r4.c
      NestedLoopJoin: r2.b = r3.b
        SeqScan: r2
        SeqScan: r3
      SeqScan: r4
    SeqScan: r1

statement ok
drop table r1;

statement ok
drop table r2;

statement ok
drop table r3;

statement ok
drop table r4;
